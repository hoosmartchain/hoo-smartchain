# This is an example goreleaser.yaml file with some sane defaults.
# Make sure to check the documentation at http://goreleaser.com
project_name: hsc
env:
  - GO111MODULE=on
  # - GOPROXY=https://goproxy.cn
before:
  hooks:
    # - go get -u github.com/golangci/golangci-lint/cmd/golangci-lint
    # you may remove this if you don't use vgo
    # - go mod download
    # you may remove this if you don't need go generate
    # - go generate ./..
builds:
- id: hsc-windows-x64
  ldflags: -X github.com/vvvictorlee/hsc/chain/version.Version={{ .Version }} -X github.com/vvvictorlee/hsc/chain/version.GitRev={{ .ShortCommit }} -X github.com/vvvictorlee/hsc/chain/version.BuildTime={{ .Date }} -X github.com/vvvictorlee/hsc/chain/version.Mode=MainNet -buildmode=exe
  binary: hsc
  env:
    - CGO_ENABLED=1
    - CC=x86_64-w64-mingw32-gcc
    - CXX=x86_64-w64-mingw32-g++
  main: ./cmd/geth
  goos:
    - windows
  goarch:
    - amd64

# Test net
- id: hsc-windows-enterprise
  flags:
    - -tags=testnet
  ldflags: -X github.com/vvvictorlee/hsc/chain/version.Version={{ .Version }} -X github.com/vvvictorlee/hsc/chain/version.GitRev={{ .ShortCommit }} -X github.com/vvvictorlee/hsc/chain/version.BuildTime={{ .Date }} -X github.com/vvvictorlee/hsc/chain/version.Mode=TestNet -buildmode=exe
  binary: hsce
  env:
    - CGO_ENABLED=1
    - CC=x86_64-w64-mingw32-gcc
    - CXX=x86_64-w64-mingw32-g++
  main: ./cmd/geth
  goos:
    - windows
  goarch:
    - amd64

archives:
- format: tar.gz
  format_overrides:
    - goos: windows
      format: zip
  name_template: "{{ .Binary }}-v{{ .Version }}-{{ .ShortCommit }}-{{ .Os }}-{{ .Arch }}"
  replacements:
    amd64: x64
    windows: Windows
  files:
  - README.md
  - LICENSE
  allow_different_binary_count: true

checksum:
  name_template: "{{ .ProjectName }}_checksums.txt"

snapshot:
  name_template: SNAPSHOT-{{.ShortCommit}}

# changelog:
#   sort: asc
#   filters:
#     exclude:
#     - '^docs:'
#     - '^test:'
#     - '^chore:'
#     - Merge pull request
#     - Merge branch

signs:
  -
    # name of the signature file.
    # '${artifact}' is the path to the artifact that should be signed.
    #
    # defaults to `${artifact}.sig`
    # signature: "${artifact}_sig"

    # command line arguments for the command
    #
    # to sign with a specific key use
    # args: ["-u", "<key id, fingerprint, email, ..>", "--output", "${signature}", "--detach-sign", "${artifact}"]
    #
    # defaults to `["--output", "${signature}", "--detach-sign", "${artifact}"]`
    args: ["-u", "QLCChain Bot (qlcchain-bot) <developers@qlink.mobi>", "--output", "${signature}", "--detach-sign", "${artifact}"]

    # which artifacts to sign
    #
    #   checksum: only checksum file(s)
    #   all:      all artifacts
    #   none:     no signing
    #
    # defaults to `none`
    artifacts: all

release:
  github:
    owner: vvvictorlee
    name: hsc

  prerelease: auto
